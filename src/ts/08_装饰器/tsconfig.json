{
    "compilerOptions": {
        "target": "ES6",
        "lib": ["ES6", "DOM"],
        "module": "ES6",
        "strict": true,
        "noEmitOnError": true,
        "removeComments": true,
        "experimentalDecorators": true
    }
}

// {
//     "compilerOptions": {
/* 访问https://aka.ms/tsconfig.json以了解有关此文件的更多信息 */
/* 基本选项 */
// "incremental": true,                         /* 启用增量编译 */
// "target": "es5",                             /* 指定ECMAScript目标版本：“ ES3”（默认），“ ES5”，“ ES2015”，“ ES2016”，“ ES2017”，“ ES2018”，“ ES2019”，“ ES2020”或“ ESNEXT”。 */
// "module": "commonjs",                        /* 指定模块代码生成：“ none”，“ commonjs”，“ amd”，“ system”，“ umd”，“ es2015”，“ es2020”或“ ESNext”。 */
// "lib": [],                                   /* 指定要包含在编译中的库文件。 */
// "allowJs": true,                             /* 允许编译javascript文件。 */
// "checkJs": true,                             /* 报告.js文件中的错误。 */
// "jsx": "preserve",                           /* 指定JSX代码生成：'preserve'，'react-native'或'react'。 */
// "declaration": true,                         /* 生成相应的'.d.ts'文件。 */
// "declarationMap": true,                      /* 为每个相应的'.d.ts'文件生成一个源映射。 */
// "sourceMap": true,                           /* 生成相应的'.map'文件。 */
// "outFile": "./",                             /* 连接并输出到单个文件。 */
// "outDir": "./",                              /* 将输出结构重定向到目录。 */
// "rootDir": "./",                             /* 指定输入文件的根目录。用于通过--outDir控制输出目录结构。 */
// "composite": true,                           /* 启用项目编译*/
// "tsBuildInfoFile": "./",                     /* 指定用于存储增量编译信息的文件*/
// "removeComments": true,                      /* 不发出注释以输出。 *
// "noEmit": true,                              /* 不发出输出。 */
// "importHelpers": true,                       /* Import从'tslib'发出辅助函数。 */
// "downlevelIteration": true,                  /* 在以'ES5'或'ES3'为目标时，以'for-of'，散布和解构形式提供对可迭代对象的全面支持。 */
// "isolatedModules": true,                     /* 将每个文件作为一个单独的模块进行编译（类似于'ts.transpileModule'）。 */
/* 严格的类型检查选项 */
// "strict": true,                              /* 启用所有严格的类型检查选项。 */
// "noImplicitAny": true,                       /* 在隐含“any”类型的表达式和声明上引发错误。 */
// "strictNullChecks": true,                    /* 启用严格的null检查。 */
// "strictFunctionTypes": true,                 /* 启用对函数类型的严格检查。 */
// "strictBindCallApply": true,                 /* 在函数上启用严格的“ bind”，“ call”和“ apply”方法。 */
// "strictPropertyInitialization": true,        /* 启用对类中属性初始化的严格检查。 */
// "noImplicitThis": true,                      /* 在隐含'any'类型的'this'表达式上引发错误。 */
// "alwaysStrict": true,                        /* 以严格模式解析，并对每个源文件发出“ use strict”。 */
/* 其他检查 */
// "noUnusedLocals": true,                      /* 报告未使用的本地错误。 */
// "noUnusedParameters": true,                  /* 报告未使用参数的错误。 */
// "noImplicitReturns": true,                   /* 当并非函数中的所有代码路径都返回值时，报告错误。 */
// "noFallthroughCasesInSwitch": true,          /* 在switch语句中报告失败情况的错误。 */
// "noUncheckedIndexedAccess": true,            /* 在索引签名结果中包含“未定义” */
/* 模块分辨率选项 */
// "moduleResolution": "node",                  /* 指定模块解析策略：“节点”（Node.js）或“经典”（TypeScript 1.6之前的版本）。 */
// "baseUrl": "./",                             /* 用于解析非绝对模块名称的基本目录。 */
// "paths": {},                                 /* 一系列条目，这些条目将导入重新映射到相对于'baseUrl'的查找位置。 */
// "rootDirs": [],                              /* 根目录列表，其组合内容表示运行时项目的结构。 */
// "typeRoots": [],                             /* 包含类型定义的文件夹列表。 */
// "types": [],                                 /* 键入要包含在编译中的声明文件。 */
// "allowSyntheticDefaultImports": true,        /* 允许从模块进行默认导入，而没有默认导出。这不影响代码发出，仅影响类型检查。 */
// "esModuleInterop": true,                     /* 通过为所有导入创建名称空间对象来启用CommonJS和ES模块之间的发射互操作性。暗示“ allowSyntheticDefaultImports”。 */
// "preserveSymlinks": true,                    /* 不要解析符号链接的真实路径。 */
// "allowUmdGlobalAccess": true,                /* 允许从模块访问UMD全局变量。 */
/* 源映射选项*/
// "sourceRoot": "",                            /* 指定调试器应在其中定位TypeScript文件的位置，而不是源位置。 */
// "mapRoot": "",                               /* 指定调试器应定位地图文件的位置，而不是生成的位置。 */
// "inlineSourceMap": true,                     /* 发出带有源映射的单个文件，而不是具有单独的文件。 */
// "inlineSources": true,                       /* 在单个文件中将源代码与源映射一起发射；需要设置“ --inlineSourceMap”或“ --sourceMap”。 */
/* 实验选项 */
// "experimentalDecorators": true,              /* 为ES7装饰器启用实验性支持。 */
// "emitDecoratorMetadata": true,               /* 为发布装饰器的类型元数据启用实验性支持。 */
/* 高级选项 */
// "skipLibCheck": true,                        /* 跳过声明文件的类型检查。 */
// "forceConsistentCasingInFileNames": true     /* 禁止对同一文件使用大小写不一致的引用。 */
//     }
// }
